services:
  zookeeper:
    image: confluentinc/cp-zookeeper:7.3.0
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    networks:
      - kafka_net
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "2181"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 15s

  kafka:
    image: confluentinc/cp-kafka:7.3.0
    depends_on:
      zookeeper:
        condition: service_healthy
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
      KAFKA_NUM_PARTITIONS: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
    ports:
      - "29092:29092"
      - "9092:9092"
    networks:
      - kafka_net
    healthcheck:
      test:
        [
          "CMD",
          "kafka-topics",
          "--bootstrap-server",
          "localhost:9092",
          "--list",
        ]
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 30s

  connect:
    image: debezium/connect:2.1
    depends_on:
      kafka:
        condition: service_healthy
    environment:
      BOOTSTRAP_SERVERS: kafka:9092
      GROUP_ID: 1
      CONFIG_STORAGE_TOPIC: connect_configs
      OFFSET_STORAGE_TOPIC: connect_offsets
      STATUS_STORAGE_TOPIC: connect_statuses
      KEY_CONVERTER: org.apache.kafka.connect.json.JsonConverter
      VALUE_CONVERTER: org.apache.kafka.connect.json.JsonConverter
      CONNECT_KEY_CONVERTER_SCHEMAS_ENABLE: "false"
      CONNECT_VALUE_CONVERTER_SCHEMAS_ENABLE: "false"
    ports:
      - "8083:8083"
    networks:
      - kafka_net
    extra_hosts:
      - "host.docker.internal:host-gateway"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8083/connectors"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    depends_on:
      kafka:
        condition: service_healthy
    ports:
      - "8085:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:9092
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181
    networks:
      - kafka_net

  # Simple Consumer without nodemon - restart manually when needed
  consumer:
    build:
      context: ../consumer
      dockerfile: Dockerfile
    depends_on:
      - kafka
    volumes:
      # Mount the entire consumer directory for file updates
      - ../consumer:/app
      # Mount node_modules separately to preserve installed dependencies
      - consumer_node_modules:/app/node_modules
    networks:
      - kafka_net
    extra_hosts:
      - "host.docker.internal:host-gateway"
    restart: on-failure:5
    environment:
      - NODE_ENV=development
      - KAFKA_BROKER=kafka:9092
    # Simple startup with Kafka connectivity check
    entrypoint: >
      sh -c '
        echo "üöÄ Starting Consumer..."
        echo "üîç Checking Kafka connectivity..."
        
        # Function to check Kafka connectivity
        check_kafka() {
          nc -z kafka 9092 >/dev/null 2>&1
        }
        
        # Wait for Kafka with timeout
        TIMEOUT=60
        ELAPSED=0
        
        while ! check_kafka && [ $ELAPSED -lt $TIMEOUT ]; do
          echo "‚è≥ Waiting for Kafka... ($ELAPSED/$TIMEOUT seconds)"
          sleep 5
          ELAPSED=$((ELAPSED + 5))
        done
        
        if check_kafka; then
          echo "‚úÖ Kafka is ready!"
          echo "üéØ Starting consumer..."
          node consumer.js
        else
          echo "‚ùå Kafka connection timeout after $TIMEOUT seconds"
          exit 1
        fi
      '

volumes:
  consumer_node_modules:

networks:
  kafka_net:
    name: kafka_net
    driver: bridge
